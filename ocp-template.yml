apiVersion: v1
kind: Template
message: |-
  An RHPDS Envs Slack app has been installed into this namespace. Use the app route in Slack to configure this application.

  There's five operations:
    - /rhpds_envs add <cluster_url>
    - /rhpds_envs delete <cluster_name>
    - /rhpds_envs list
    - /rhpds_envs help
    - /rhpds_envs validate <cluster_name>
labels:
  template: rhpdsbot-slackapp
  app: rhpdsbot
metadata:
  annotations:
    openshift.io/display-name: RHPDS Envs Slack App
  name: rhpdsbot-slackapp
parameters:
- description: Application name
  displayName: Application name
  name: APP_NAME
  required: true
  value: rhpdsbot
- description: Application namespace
  displayName: Application namespace
  name: NAMESPACE
  required: true
  value: 
objects:
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      app: ${APP_NAME}
      deploymentconfig: ${APP_NAME}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        creationTimestamp: null
        labels:
          app: ${APP_NAME}
          deploymentconfig: ${APP_NAME}
      spec:
        containers:
        - env:
          - name: quarkus.infinispan-client.server-list
            value: ${APP_NAME}-cache:11222
          image: quay.io/jorgemoralespou/rhpdsbot:latest
          imagePullPolicy: Always
          name: ${APP_NAME}
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: ${APP_NAME}
      deploymentconfig: ${APP_NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    host:
    port:
      targetPort: 8080
    to:
      kind: Service
      name: ${APP_NAME}
      weight: 100
    wildcardPolicy: None
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      template: infinispan-ephemeral
    name: ${APP_NAME}-cache
  spec:
    podManagementPolicy: OrderedReady
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: ${APP_NAME}
        clusterName: ${APP_NAME}-cache
    serviceName: ""
    template:
      metadata:
        labels:
          app: ${APP_NAME}
          clusterName: ${APP_NAME}-cache
      spec:
        containers:
        - args:
          - cloud.xml
          - -Djboss.default.jgroups.stack=dns-ping
          - -Djgroups.dns_ping.dns_query=${APP_NAME}-cache-ping.${NAMESPACE}.svc.cluster.local
          env:
          - name: MGMT_USER
            value: infinispan
          - name: MGMT_PASS
            value: infinispan
          - name: APP_USER
            value: infinispan
          - name: APP_PASS
            value: infinispan
          - name: IMAGE
          - name: JGROUPS_PING_PROTOCOL
            value: openshift.DNS_PING
          - name: OPENSHIFT_DNS_PING_SERVICE_NAME
            value: ${APP_NAME}-cache-ping
          - name: NUMBER_OF_INSTANCE
            value: "\x01"
          image: jboss/infinispan-server:latest
          imagePullPolicy: Always
          livenessProbe:
            exec:
              command:
              - /usr/local/bin/is_running.sh
            failureThreshold: 5
            initialDelaySeconds: 10
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 80
          name: infinispan
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          - containerPort: 9990
            name: management
            protocol: TCP
          - containerPort: 8888
            name: ping
            protocol: TCP
          - containerPort: 11222
            name: hotrod
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /usr/local/bin/is_healthy.sh
            failureThreshold: 5
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 80
          resources:
            requests:
              cpu: 500m
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    updateStrategy:
      type: OnDelete
- apiVersion: v1
  kind: Service
  metadata:
    name: ${APP_NAME}-cache
  spec:
    ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: hotrod
      port: 11222
      protocol: TCP
      targetPort: 11222
    selector:
      app: ${APP_NAME}
      clusterName: ${APP_NAME}-cache
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    name: ${APP_NAME}-cache-ping
  spec:
    clusterIP: None
    ports:
    - name: ping
      port: 8888
      protocol: TCP
      targetPort: 8888
    selector:
      app: ${APP_NAME}
      clusterName: ${APP_NAME}-cache
    sessionAffinity: None
    type: ClusterIP
